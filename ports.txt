Excelente pergunta! Vamos explicar isso de forma simples, como se os containers fossem "caixas" dentro de uma "casa" (sua máquina).

Imagine que cada serviço (seu app, o MySQL, Redis, MongoDB) é uma caixa separada e isolada. Cada caixa tem seus próprios programas e portas internas onde esses programas "escutam" por comunicação.

1. O que são ports?

Pense na sua máquina (o computador onde o Docker está rodando) como uma casa grande. Essa casa tem "portas" que podem ser usadas para entrar ou sair.

Dentro de cada caixa (container), um serviço roda e "escuta" em uma porta interna específica.

Seu app Node.js escuta na porta interna 3000.

O MySQL escuta na porta interna 3306.

O Redis escuta na porta interna 6379.

O MongoDB escuta na porta interna 27017.

O ports no seu docker-compose.yml funciona como um roteamento ou um túnel da sua máquina hospedeira (a casa grande) para dentro de uma porta específica de uma caixa (container).

A sintaxe é geralmente "PORTA_DA_SUA_MAQUINA:PORTA_INTERNA_DO_CONTAINER".

Exemplo: ports: - "3000:3000" para o serviço app

Isso significa: "Qualquer coisa que tentar se conectar à porta 3000 da minha máquina será direcionada para a porta 3000 dentro do container app."

Por que fazer isso? Para que você, do seu navegador ou de outra ferramenta rodando diretamente na sua máquina, possa acessar o serviço que está dentro do container.

Você abre http://localhost:3000 no seu navegador, e o Docker redireciona essa conexão para o container app.

Exemplo: ports: - "6379:6379" para o serviço redis

Isso significa: "Qualquer coisa que tentar se conectar à porta 6379 da minha máquina será direcionada para a porta 6379 dentro do container redis."

Você pode usar um cliente Redis instalado na sua máquina e configurá-lo para conectar em localhost:6379. Essa conexão vai parar no Redis que está dentro do container.

Exemplo: ports: - "3307:3306" para o serviço mysql

Isso significa: "Qualquer coisa que tentar se conectar à porta 3307 da minha máquina será direcionada para a porta 3306 dentro do container mysql."

Neste caso, você está mapeando a porta interna 3306 do MySQL para a porta 3307 na sua máquina hospedeira. Isso é útil se você já tiver algo usando a porta 3306 na sua máquina (como outro MySQL local) e não quiser que haja conflito. Você usaria um cliente MySQL na sua máquina conectando a localhost:3307 para acessar o MySQL do container.

Em resumo sobre ports: É a forma de permitir que coisas fora da rede Docker (na sua máquina) se conectem a serviços dentro dos containers.

2. Como entender "hostname 'mysql' na network"?

Agora, pense na comunicação entre as caixas (containers) dentro da mesma rede Docker (app-network no seu caso).

Quando você define networks e coloca vários serviços na mesma rede, o Docker Compose cria uma rede virtual interna para eles.

Dentro dessa rede, cada serviço é automaticamente acessível por outros serviços usando o nome do serviço definido no docker-compose.yml como hostname.

Exemplo: Seu app precisa se conectar ao mysql

Sua aplicação Node.js está rodando dentro da caixa app.

O banco de dados MySQL está rodando dentro da caixa mysql.

Como a caixa app sabe onde encontrar a caixa mysql?

O Docker, dentro da app-network, cria um sistema de nomes interno. Ele sabe que o serviço chamado mysql corresponde ao container mysql-container.

Então, quando seu código Node.js usa "host": "mysql" para se conectar, ele está dizendo: "Procure pelo serviço chamado 'mysql' dentro da minha rede".

O Docker resolve "mysql" para o endereço IP interno da caixa mysql dentro da app-network.

A conexão é feita diretamente entre o container app e o container mysql na porta interna 3306.

Pontos importantes sobre a comunicação interna (hostname):

Não usa localhost: localhost dentro de um container refere-se ao próprio container. Se seu app tentar conectar em localhost:3306, ele tentará encontrar um serviço MySQL dentro dele mesmo, o que não existe.

Não usa o IP da sua máquina hospedeira: Os containers se comunicam via rede interna do Docker.

Usa o nome do serviço: O nome que você dá ao serviço no docker-compose.yml (mysql, redis, mongodb, app) se torna o hostname para comunicação entre os containers na mesma rede.

Não usa a porta mapeada em ports: A comunicação interna usa a porta interna do container de destino (3306 para mysql). O mapeamento 3307:3306 é apenas para acesso da sua máquina hospedeira ao container. Seu app dentro do Docker não usa a porta 3307.

Resumo:

ports: Para conectar da sua máquina hospedeira para um container (acesso externo).

Hostname (Nome do Serviço): Para conectar de um container para outro container dentro da mesma rede Docker (acesso interno). Seu código Node.js usa o nome do serviço (mysql) porque está dentro de um container e precisa falar com outro container.

Espero que essa analogia da "casa" e das "caixas" ajude a clarear esses conceitos!